# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions-tab-url
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: rachel-portfolio    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'         # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '22.x'                   # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --production=false

    - name: Build application
      run: npm run build

    - name: Clean dev dependencies
      run: npm prune --production

    - name: Create deployment package
      run: |
        # Create a clean deployment directory
        mkdir deployment
        # Copy built application and necessary files
        cp -r .next deployment/
        cp -r public deployment/
        cp package*.json deployment/
        cp -r node_modules deployment/
        
        # Create startup script for Azure
        cat > deployment/server.js << 'EOF'
        const { createServer } = require('http')
        const { parse } = require('url')
        const next = require('next')

        const dev = process.env.NODE_ENV !== 'production'
        const hostname = process.env.WEBSITES_HOSTNAME || 'localhost'
        const port = process.env.PORT || 3000

        const app = next({ dev, hostname, port })
        const handle = app.getRequestHandler()

        app.prepare().then(() => {
          createServer(async (req, res) => {
            try {
              const parsedUrl = parse(req.url, true)
              await handle(req, res, parsedUrl)
            } catch (err) {
              console.error('Error occurred handling', req.url, err)
              res.statusCode = 500
              res.end('internal server error')
            }
          }).listen(port, (err) => {
            if (err) throw err
            console.log(`> Ready on http://${hostname}:${port}`)
          })
        })
        EOF
        
        # Create web.config for Azure IIS
        cat > deployment/web.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <handlers>
              <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
            </handlers>
            <rewrite>
              <rules>
                <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                  <match url="^server.js\/debug[\/]?" />
                </rule>
                <rule name="StaticContent">
                  <action type="Rewrite" url="public{REQUEST_URI}"/>
                </rule>
                <rule name="DynamicContent">
                  <conditions>
                    <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                  </conditions>
                  <action type="Rewrite" url="server.js"/>
                </rule>
              </rules>
            </rewrite>
            <security>
              <requestFiltering>
                <hiddenSegments>
                  <remove segment="bin"/>
                </hiddenSegments>
              </requestFiltering>
            </security>
            <iisnode 
              node_env="%node_env%"
              nodeProcessCountPerApplication="1"
              maxConcurrentRequestsPerProcess="1024"
              maxNamedPipeConnectionRetry="3"
              namedPipeConnectionRetryDelay="2000"
              maxNamedPipeConnectionPoolSize="512"
              maxNamedPipePooledConnectionAge="30000"
              asyncCompletionThreadCount="0"
              initialRequestBufferSize="4096"
              maxRequestBufferSize="65536"
              watchedFiles="*.js"
              uncFileChangesPollingInterval="5000"
              gracefulShutdownTimeout="60000"
              loggingEnabled="true"
              logDirectoryNameSuffix="logs"
              debuggingEnabled="false"
              debuggerPortRange="5058-6058"
              debuggerPathSegment="debug"
              maxLogFileSizeInKB="128"
              appendToExistingLog="false"
              logFileFlushInterval="5000"
              devErrorsEnabled="false"
              flushResponse="false"
              enableXFF="false"
              promoteServerVars="" />
          </system.webServer>
        </configuration>
        EOF

    - name: Zip artifact for deployment
      run: |
        cd deployment
        zip -r ../release.zip . -x "*.git*"

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: release.zip

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app

    - name: Unzip artifact for deployment
      run: unzip release.zip
      
    - name: 'Deploy to Azure Web App'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
