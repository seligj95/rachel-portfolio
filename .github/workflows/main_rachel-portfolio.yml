# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - rachel-portfolio

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: rachel-portfolio    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'         # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '22.x'                   # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: npm install, build, and test
        run: |
          npm ci --production=false
          npm install
          npm run build --if-present
          npm run test --if-present
          npm prune --production

      - name: Create deployment package
        run: |
          # Create a clean deployment directory
          mkdir deployment
          # Copy built application and necessary files
          cp -r .next deployment/
          cp -r public deployment/
          cp package*.json deployment/
          cp -r node_modules deployment/
          
          # Create startup script for Azure
          cat > deployment/server.js << 'EOF'
          const { createServer } = require('http')
          const { parse } = require('url')
          const next = require('next')
  
          const dev = process.env.NODE_ENV !== 'production'
          const hostname = process.env.WEBSITES_HOSTNAME || 'localhost'
          const port = process.env.PORT || 3000
  
          const app = next({ dev, hostname, port })
          const handle = app.getRequestHandler()
  
          app.prepare().then(() => {
            createServer(async (req, res) => {
              try {
                const parsedUrl = parse(req.url, true)
                await handle(req, res, parsedUrl)
              } catch (err) {
                console.error('Error occurred handling', req.url, err)
                res.statusCode = 500
                res.end('internal server error')
              }
            }).listen(port, (err) => {
              if (err) throw err
              console.log(`> Ready on http://${hostname}:${port}`)
            })
          })
          EOF
          
          # Create web.config for Azure IIS
          cat > deployment/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url="^server.js\/debug[\/]?" />
                  </rule>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <security>
                <requestFiltering>
                  <hiddenSegments>
                    <remove segment="bin"/>
                  </hiddenSegments>
                </requestFiltering>
              </security>
              <iisnode 
                node_env="%node_env%"
                nodeProcessCountPerApplication="1"
                maxConcurrentRequestsPerProcess="1024"
                maxNamedPipeConnectionRetry="3"
                namedPipeConnectionRetryDelay="2000"
                maxNamedPipeConnectionPoolSize="512"
                maxNamedPipePooledConnectionAge="30000"
                asyncCompletionThreadCount="0"
                initialRequestBufferSize="4096"
                maxRequestBufferSize="65536"
                watchedFiles="*.js"
                uncFileChangesPollingInterval="5000"
                gracefulShutdownTimeout="60000"
                loggingEnabled="true"
                logDirectoryNameSuffix="logs"
                debuggingEnabled="false"
                debuggerPortRange="5058-6058"
                debuggerPathSegment="debug"
                maxLogFileSizeInKB="128"
                appendToExistingLog="false"
                logFileFlushInterval="5000"
                devErrorsEnabled="false"
                flushResponse="false"
                enableXFF="false"
                promoteServerVars="" />
            </system.webServer>
          </configuration>
          EOF

      - name: Zip artifact for deployment
        run: |
          cd deployment
          zip -r ../release.zip . -x "*.git*"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_BC668BF938304F7CA76279D1D970FB6A }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_F86586FAA65C4EEFA0E994C6A62A18D7 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_46B5440C2D194D6793F36604A6ABD93A }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'rachel-portfolio'
          slot-name: 'Production'
          package: .
          
